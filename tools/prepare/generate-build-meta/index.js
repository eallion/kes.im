import fs from 'fs';
import path from 'path';
import {execSync} from 'child_process';

import {rootPath, loadPackageJson, getEnv} from '../../utils.js';

// Resolve paths.
const outputRelativePath = 'packages/common/gen/build.ts';
const outputPath = path.resolve(rootPath, outputRelativePath);

export default function generateBuildMeta() {
  // Get package.json.
  const packageJson = loadPackageJson();

  // Generate
  try {
    // Collect build meta.
    const time = new Date().toISOString();
    const commitHash = execSync('git rev-parse HEAD').toString().trim();
    const {WORKER_ENV:workerEnv, RUN:run} = getEnv();
    const version = packageJson.version;
    const build = run.split('-')[1];

    const buildMeta = {
      time,
      commitHash,
      workerEnv,
      version,
      run,
      build,
    };

    // Write build meta to file.
    const content = `
      \n// This file is auto-generated by scripts/deploy-prepare/generate-build-meta.js
      \nexport default ${JSON.stringify(buildMeta, null, 2)};\n\n
    `;

    fs.writeFileSync(outputPath, content);

    console.log(`[SUCCESS] build.ts file is generated and saved to ${outputRelativePath}.`);
  } catch (error) {
    console.error('[ERROR] Error during generate-build-meta:', error);
  }
}
